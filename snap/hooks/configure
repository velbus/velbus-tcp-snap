#!/usr/bin/env python3

import subprocess
import json
import os

## Get configuration settings

# TCP
tcp_port = subprocess.check_output(["snapctl", "get", "tcp.port"]).decode("utf-8").strip()
tcp_relay = subprocess.check_output(["snapctl", "get", "tcp.relay"]).decode("utf-8").strip()
# TCP SSL
tcp_ssl = subprocess.check_output(["snapctl", "get", "tcp.ssl"]).decode("utf-8").strip()
tcp_pk = subprocess.check_output(["snapctl", "get", "tcp.pk"]).decode("utf-8").strip()
tcp_cert = subprocess.check_output(["snapctl", "get", "tcp.cert"]).decode("utf-8").strip()
# TCP Auth
tcp_auth = subprocess.check_output(["snapctl", "get", "tcp.auth"]).decode("utf-8").strip()
tcp_auth_key = subprocess.check_output(["snapctl", "get", "tcp.authkey"]).decode("utf-8").strip()
# Serial
serial_autodiscover = subprocess.check_output(["snapctl", "get", "serial.autodiscover"]).decode("utf-8").strip()
serial_port = subprocess.check_output(["snapctl", "get", "serial.port"]).decode("utf-8").strip()
# Logging
logging_type = subprocess.check_output(["snapctl", "get", "logging.type"]).decode("utf-8").strip()
logging_output = subprocess.check_output(["snapctl", "get", "logging.output"]).decode("utf-8").strip()

# Validate
try:
	tcp_port = int(tcp_port)
except:
	print("Given TCP port '{0}' is not an integer".format([tcp_port]))
	exit(1)

if tcp_port < 1 or tcp_port > 65565:
	print("Given TCP port '{0}' should be between 1 and 65565".format([tcp_port]))
	exit(1)

if tcp_relay != "true" and tcp_relay != "false":
	print("Given value for tcp.relay '{0}' is not valid, should be bool".format(tcp_relay))
	exit(1)

if tcp_ssl != "true" and tcp_ssl != "false":
	print("Given value for tcp.ssl '{0}' is not valid, should be bool".format(tcp_ssl))
	exit(1)	

if tcp_ssl == "true" and tcp_pk == "":
	print("Given tcp.pk empty while tcp.ssl is set to 'true'")
	exit(1)

if tcp_ssl == "true" and tcp_pk != "" and not os.path.exists(tcp_pk):
	print("Given tcp.pk - no such path '{0}'".format(tcp_pk))
	exit(1)

if tcp_ssl == "true" and tcp_cert == "":
	print("Given tcp.cert empty while tcp.ssl is set to 'true'")
	exit(1)

if tcp_ssl == "true" and tcp_cert != "" and not os.path.exists(tcp_cert):
	print("Given tcp.cert - no such path '{0}'".format(tcp_cert))
	exit(1)	

if tcp_auth != "true" and tcp_auth != "false":
	print("Given value for tcp.auth '{0}' is not valid, should be bool".format(tcp_auth))
	exit(1)	
	
if tcp_auth == "true" and tcp_auth_key == "":
	print("Given tcp.auth_key is empty while tcp.auth is set to 'true'")
	exit(1)		

if serial_autodiscover != "true" and serial_autodiscover != "false":
	print("Given value for serial.autodiscover '{0}' is not valid, should be bool".format(serial_autodiscover))
	exit(1)

if serial_autodiscover == False and serial_port == "":
	print("serial.autodiscover is 'false' while no serial.port is specified")
	exit(1)

if logging_type not in ["info", "debug"]:
	print("logging.type should be 'info' or 'debug', got '{0}'".format(logging_type))
	exit(1)

if logging_output not in ["stream", "syslog"]:
	print("logging.type should be 'syslog' or 'stream', got '{0}'".format(logging_output))
	exit(1)	

# Write config
config = dict()
config["tcp"] = dict()
config["tcp"]["port"] = tcp_port
config["tcp"]["relay"] = True if tcp_relay == "true" else False
config["tcp"]["ssl"] = True if tcp_ssl == "true" else False
config["tcp"]["pk"] = tcp_pk
config["tcp"]["cert"] = tcp_cert
config["tcp"]["auth"] = True if tcp_auth == "true" else False
config["tcp"]["auth_key"] = tcp_auth_key
config["serial"] = dict()
config["serial"]["autodiscover"] = True if serial_autodiscover == "true" else False
config["serial"]["port"] = serial_port
config["logging"] = dict()
config["logging"]["output"] = logging_output
config["logging"]["type"] = logging_type

config_path = os.environ["SNAP_DATA"] + "/settings.json"
with open(config_path, "w") as f:
	json.dump(config, f)

# Reload service
subprocess.check_output(["snapctl", "restart", "velbus-tcp"])